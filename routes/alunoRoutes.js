const express = require('express');
const router = express.Router();

// Controllers
const alunoController = require('../controllers/alunoController');
const matriculaController = require('../controllers/matriculaController');
const transferenciaController = require('../controllers/transferenciaController');
const declaracaoController = require('../controllers/declaracaoController'); 
const termoController = require('../controllers/termoController'); 
const upload = require('../middlewares/upload');
const uploadController = require('../controllers/uploadController');

/**
 * @swagger
 * tags:
 *   - name: Alunos
 *   - name: Matr√≠cula
 *   - name: Transfer√™ncia
 *   - name: Declara√ß√µes
 *   - name: Termos
 *   - name: Upload
 */


// üìå Aluno

/**
 * @swagger
 * /api/aluno/alunos:
 *   post:
 *     summary: Cadastra um novo aluno
 *     tags: [Alunos]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               nome:
 *                 type: string
 *               cpf:
 *                 type: string
 *               rg:
 *                 type: string
 *               nascimento:
 *                 type: string
 *                 format: date
 *               certidao_nascimento:
 *                 type: string
 *               nis:
 *                 type: string
 *               bolsa_familia:
 *                 type: boolean
 *               alergias:
 *                 type: string
 *               deficiencia:
 *                 type: string
 *               sexo:
 *                 type: string
 *               cor_raca:
 *                 type: string
 *               nacionalidade:
 *                 type: string
 *               naturalidade:
 *                 type: string
 *               endereco:
 *                 type: string
 *               telefone:
 *                 type: string
 *               nome_social:
 *                 type: string
 *               nome_afetivo:
 *                 type: string
 *               filiacao_pai:
 *                 type: string
 *               filiacao_mae:
 *                 type: string
 *     responses:
 *       201:
 *         description: Aluno cadastrado com sucesso
 */

router.post('/alunos', alunoController.criarAluno);
/**
 * @swagger
 * /api/aluno/alunos:
 *   get:
 *     summary: Lista alunos com filtros obrigat√≥rios
 *     tags: [Alunos]
 *     parameters:
 *       - in: query
 *         name: nome
 *         required: true
 *         schema:
 *           type: string
 *         description: Nome do aluno ou todos. Obrigat√≥rio.
 *       - in: query
 *         name: status
 *         required: true
 *         schema:
 *           type: string
 *           enum: [alergico,  matriculado, desistente, ativo, tranferido]
 *         description: Categoria simulada para filtrar alunos. Obrigat√≥rio.
 *       - in: query
 *         name: turma
 *         schema:
 *           type: string
 *         description: Turma do aluno (opcional)
 *     responses:
 *       200:
 *         description: Lista de alunos filtrada
 *       400:
 *         description: Campos obrigat√≥rios ausentes
 */
router.get('/alunos', alunoController.listarAlunos);

router.get('/alunos', alunoController.listarAlunos);

/**
 * @swagger
 * /api/aluno/alunos/{id}:
 *   get:
 *     summary: Busca aluno por ID
 *     tags: [Alunos]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Dados do aluno
 *       404:
 *         description: Aluno n√£o encontrado
 */
router.get('/alunos/:id', alunoController.buscarAlunoPorId);
/**
 * @swagger
 * /api/aluno/alunos/{id}:
 *   put:
 *     summary: Atualiza dados do aluno
 *     tags: [Alunos]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               telefone:
 *                 type: string
 *               endereco:
 *                 type: string
 *     responses:
 *       200:
 *         description: Aluno atualizado com sucesso
 *       404:
 *         description: Aluno n√£o encontrado
 */
router.put('/alunos/:id', alunoController.atualizarAluno);   // Atualiza aluno por ID
/**
 * @swagger
 * /api/aluno/alunos/{id}:
 *   delete:
 *     summary: Deleta aluno por ID
 *     tags: [Alunos]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Aluno deletado com sucesso
 *       404:
 *         description: Aluno n√£o encontrado
 */
router.delete('/alunos/:id', alunoController.deletarAluno);   // Deleta aluno por ID


// üìå Matr√≠cula
/**
 * @swagger
 * /api/aluno/matricula:
 *   post:
 *     summary: Cadastra uma nova matr√≠cula
 *     tags: [Matr√≠cula]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               alunoId:
 *                 type: integer
 *               turma:
 *                 type: string
 *               anoLetivo:
 *                 type: string
 *     responses:
 *       201:
 *         description: Matr√≠cula criada com sucesso
 */
router.post('/matricula', matriculaController.criarMatricula);
/**
 * @swagger
 * /api/aluno/matricula:
 *   get:
 *     summary: Lista todas as matr√≠culas
 *     tags: [Matr√≠cula]
 *     responses:
 *       200:
 *         description: Lista de matr√≠culas
 */
router.get('/matricula', matriculaController.listarMatriculas);
/**
 * @swagger
 * /api/aluno/matricula/{id}:
 *   get:
 *     summary: Busca matr√≠cula por ID
 *     tags: [Matr√≠cula]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Dados da matr√≠cula
 *       404:
 *         description: Matr√≠cula n√£o encontrada
 */
router.get('/matricula/:id', matriculaController.buscarMatriculaPorId);
/**
 * @swagger
 * /api/aluno/matricula/{id}:
 *   put:
 *     summary: Atualiza matr√≠cula
 *     tags: [Matr√≠cula]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               turma:
 *                 type: string
 *               anoLetivo:
 *                 type: string
 *     responses:
 *       200:
 *         description: Matr√≠cula atualizada com sucesso
 */
router.put('/matricula/:id', matriculaController.atualizarMatricula);
/**
 * @swagger
 * /api/aluno/matricula/{id}:
 *   delete:
 *     summary: Deleta matr√≠cula por ID
 *     tags: [Matr√≠cula]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Matr√≠cula deletada com sucesso
 */
router.delete('/matricula/:id', matriculaController.deletarMatricula);

// üìå Transfer√™ncia

/**
 * @swagger
 * /api/aluno/transferencia:
 *   post:
 *     summary: Registra uma transfer√™ncia de aluno
 *     tags: [Transfer√™ncia]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               alunoId:
 *                 type: integer
 *               destino:
 *                 type: string
 *               motivo:
 *                 type: string
 *     responses:
 *       201:
 *         description: Transfer√™ncia registrada com sucesso
 */
router.post('/transferencia', transferenciaController.criarTransferencia);
/**
 * @swagger
 * /api/aluno/transferencia:
 *   get:
 *     summary: Lista todas as transfer√™ncias
 *     tags: [Transfer√™ncia]
 *     responses:
 *       200:
 *         description: Lista de transfer√™ncias
 */
router.get('/transferencia', transferenciaController.listarTransferencias);
/**
 * @swagger
 * /api/aluno/transferencia/{id}:
 *   get:
 *     summary: Busca transfer√™ncia por ID
 *     tags: [Transfer√™ncia]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Dados da transfer√™ncia
 *       404:
 *         description: Transfer√™ncia n√£o encontrada
 */
router.get('/transferencia/:id', transferenciaController.buscarTransferenciaPorId);

// üìå Declara√ß√µes
/**
 * @swagger
 * /api/aluno/declaracoes:
 *   post:
 *     summary: Gera uma nova declara√ß√£o
 *     tags: [Declara√ß√µes]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               alunoId:
 *                 type: integer
 *               tipo:
 *                 type: string
 *   responses:
 *       201:
 *         description: Declara√ß√£o gerada com sucesso
 */
router.post('/declaracoes', declaracaoController.criarDeclaracao);
/**
 * @swagger
 * /api/aluno/declaracoes:
 *   get:
 *     summary: Lista todas as declara√ß√µes geradas
 *     tags: [Declara√ß√µes]
 *     responses:
 *       200:
 *         description: Lista de declara√ß√µes
 */
router.get('/declaracoes', declaracaoController.listarDeclaracoes);

// üìå Termos

/**
 * @swagger
 * /api/aluno/termos:
 *   post:
 *     summary: Gera um novo termo para o aluno
 *     tags: [Termos]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - alunoId
 *               - tipo
 *             properties:
 *               alunoId:
 *                 type: integer
 *               tipo:
 *                 type: string
 *     responses:
 *       201:
 *         description: Termo gerado com sucesso
 */
router.post('/termos', termoController.criarTermo);

/**
 * @swagger
 * /api/aluno/termos:
 *   get:
 *     summary: Lista todos os termos gerados
 *     tags: [Termos]
 *     responses:
 *       200:
 *         description: Lista de termos
 */
router.get('/termos', termoController.listarTermos);
// üìå Upload de documentos
/**
 * @swagger
 * /api/aluno/upload:
 *   post:
 *     summary: Envia um documento para o aluno
 *     tags: [Upload]
 *     requestBody:
 *       required: true
 *       content:
 *         multipart/form-data:
 *           schema:
 *             type: object
 *             properties:
 *               documento:
 *                 type: string
 *                 format: binary
 *     responses:
 *       201:
 *         description: Documento enviado com sucesso
 */

router.post('/upload', upload.single('documento'), uploadController.enviarDocumento);
/**
 * @swagger
 * /api/aluno/upload/{id}:
 *   delete:
 *     summary: Deleta um documento enviado
 *     tags: [Upload]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *         description: ID do documento
 *     responses:
 *       200:
 *         description: Documento deletado com sucesso
 *       404:
 *         description: Documento n√£o encontrado
 */

router.delete('/upload/:id', uploadController.deletarDocumento);

//consulta detalhada do aluno//
/**
 * @swagger
 * /api/aluno/alunos/{id}/detalhado:
 *   get:
 *     summary: Consulta detalhada do aluno com dados relacionados
 *     tags: [Alunos]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Dados completos do aluno
 *       404:
 *         description: Aluno n√£o encontrado
 */

 
router.get('/alunos/:id/detalhado', alunoController.consultaDetalhada);


module.exports = router;
